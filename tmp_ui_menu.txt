    const grid = $('#grid-productos');
    const q = $('#buscar');
    const chips = $$('#chips-filtros .chip');
    const ordenar = $('#ordenar');
    const render = (items) => { grid.innerHTML = items.map(productCard).join(''); };
    async function load(){
      const term = q.value || '';
      const catIds = chips.filter(c => c.getAttribute('data-active') === 'true').map(c => c.getAttribute('data-cat-id'));
      const by = ordenar.value;
      const params = { search: term, ordenar: by };
      if(catIds.length) params.categoria_id = catIds.join(',');
      try { const items = await API.menu.listar(params); render(items); } catch(e){ console.error(e); }
    }
    load();
    q.addEventListener('input', ()=> load());
    chips.forEach(ch => ch.addEventListener('click', ()=>{ ch.setAttribute('data-active', ch.getAttribute('data-active') === 'true' ? 'false' : 'true'); load(); }));
    ordenar.addEventListener('change', ()=> load());
  }

  async function initPromos(){
    try{ const promos = await API.promos.listar(); $('#lista-promos').innerHTML = promos.map(promoCard).join(''); }catch(e){ console.error(e); }
  }

  async function initSucursales(){
    try{
      const sedeId = localStorage.getItem('selectedSedeId') || '';
      const data = await API.sucursales.listar(sedeId? { sede_id: sedeId } : {});
      $('#lista-sucursales').innerHTML = data.map(branchCard).join('');
      const name = localStorage.getItem('selectedSedeName') || '';
      $('#mapa').textContent = 'Mapa placeholder '+(name? `(Sede: ${name})` : '(todas las sedes)');
      window.addEventListener('sede:changed', async (ev) => {
        const id = ev.detail?.id || '';
        const list = await API.sucursales.listar(id? { sede_id: id } : {});
        $('#lista-sucursales').innerHTML = list.map(branchCard).join('');
        const nm = ev.detail?.name || '';
        $('#mapa').textContent = 'Mapa placeholder '+(nm? `(Sede: ${nm})` : '(todas las sedes)');
      });
    }catch(e){ console.error(e); }
  }

  async function initPlatillo(){ /* sin lógica adicional */ }

  async function initCarrito(){
    const table = document.getElementById('tabla-carrito');
    if(!table) return;
    const resumen = document.getElementById('resumen');
    const $sumSubtotal = resumen ? resumen.querySelector('div:nth-of-type(1) strong, #sum-subtotal') : null;
    const $sumEnvio = resumen ? resumen.querySelector('div:nth-of-type(2) strong, #sum-envio') : null;
    const $sumTotal = resumen ? resumen.querySelector('div:nth-of-type(3) strong, #sum-total') : null;
    async function recalc(){
      const items = Array.from(table.querySelectorAll('tbody tr')).map(tr => ({ id: parseInt(tr.getAttribute('data-item-id'),10)||0, cantidad: parseInt(tr.querySelector('.qty')?.value||'0',10)||0 }));
      try {
        const resp = await API.carrito.calcular({ items });
        resp.items.forEach(it => {
          const tr = table.querySelector(`tbody tr[data-item-id="${it.id}"]`);
          if(!tr) return;
          const precio = tr.querySelector('td.precio');
          const subtotal = tr.querySelector('td.subtotal');
          if(precio) precio.textContent = `$${Number(it.precio||0).toFixed(2)}`;
          if(subtotal) subtotal.textContent = `$${Number(it.subtotal||0).toFixed(2)}`;
        });
        if($sumSubtotal) $sumSubtotal.textContent = `$${Number(resp.subtotal||0).toFixed(2)}`;
        if($sumEnvio) $sumEnvio.textContent = `$${Number(resp.envio||0).toFixed(2)}`;
        if($sumTotal) $sumTotal.textContent = `$${Number(resp.total||0).toFixed(2)}`;
      } catch(e){ console.error(e); }
    }
    recalc();
    table.addEventListener('input', (e)=>{ if(e.target.matches('.qty')) recalc(); });
    document.getElementById('btn-recalcular')?.addEventListener('click', recalc);
  }
  async function initCheckout(){ /* estático */ }

  async function initFacturacion(){
    const $r = (id) => document.getElementById(id);
    const btn = $r('btn-generar-fact');
    if(!btn) return;
    btn.addEventListener('click', async () => {
      const payload = {
        rfc: $r('fact-rfc')?.value?.trim(),
        razon_social: $r('fact-razon')?.value?.trim(),
        correo: $r('fact-correo')?.value?.trim(),
        telefono: $r('fact-telefono')?.value?.trim(),
        calle: $r('fact-calle')?.value?.trim(),
        numero_ext: $r('fact-numero-ext')?.value?.trim(),
        numero_int: $r('fact-numero-int')?.value?.trim(),
        colonia: $r('fact-colonia')?.value?.trim(),
        municipio: $r('fact-municipio')?.value?.trim(),
        estado: $r('fact-estado')?.value?.trim(),
        pais: $r('fact-pais')?.value?.trim(),
        cp: $r('fact-cp')?.value?.trim(),
        regimen: $r('fact-regimen')?.value?.trim(),
        uso_cfdi: $r('fact-uso')?.value?.trim()
      };
      const ticketId = parseInt($r('fact-ticket-id')?.value||'0',10)||0;
      const out = $r('fact-resumen');
      if(!payload.rfc || !payload.razon_social || !ticketId){ toast('Completa RFC, Razón social y Ticket ID'); return; }
      try {
        const c = await API.facturacion.registrarCliente(payload);
        const clienteId = c?.cliente?.id;
        if(!clienteId) throw new Error('Cliente no generado');
        const fact = await API.facturacion.generar({ ticket_id: ticketId, cliente_id: clienteId });
        const f = fact?.factura; const det = fact?.detalles||[];
        if(!f){ throw new Error('No se obtuvo la factura'); }
        out.innerHTML = `
          <div class="mt-2">
            <p><strong>Factura:</strong> ${f.folio || f.factura_id} · ${f.uuid || ''}</p>
            <p class="text-muted">Ticket #${f.ticket_folio || f.ticket_id} · Total: $${Number(f.total||0).toFixed(2)}</p>
          </div>
          <div class="mt-3">
            <h3>Conceptos</h3>
            <ul>
              ${det.map(d=>`<li>${d.cantidad} × ${d.descripcion} — $${Number(d.importe||0).toFixed(2)}</li>`).join('')}
            </ul>
          </div>`;
        toast('Factura generada');
      } catch(e){ console.error(e); toast('Error al generar factura'); }
    });
  }

  window.UI = {
